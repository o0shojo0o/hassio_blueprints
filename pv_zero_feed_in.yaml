blueprint:
  name: Avoiding the feed-in of PV energy into the grid
  description: '**Version: 0.0.1**

    # Summary This automation will react on changes of energy imported or exported
    from the grid. It will control the Photovoltaic power generation by setting the
    limit to a value avoiding exporting to the grid

    ## Required sensors / entities

    <u>GridPowerMeters:</u> Sensors measuring Grid import or export e.g. all 3 phases
    in W. All power meters will be summed up to define the total grid import or export.

    <u>PVPowerMeters:</u> Sensors measuring PV Generation in W If sevaral Sensors
    are selected, those will be summed up.

    <u>NonPersistantLimit</u>: Entity to set the non persistant absolut limit in W.
    It should be the non persistant limit to avoid too many writes towards the flash
    memory.

    <u>InverterOnlineStatus</u> Entity indicating if the inverter is available (''On'' -> available)

    <u>Limit Helper</u> Entity helper is required to ensure that the inverter is not flooded with commands

    Kudos for the simple algorithm and idea go to: https://selbstbau-pv.de/wissensbasis/nulleinspeisung-hoymiles-hm-1500-mit-opendtu-python-steuerung/
    '
  domain: automation
  input:
    MaxInverterPower:
      name: Inverter upper limit
      description: Define the maximum power the inverter can deliver in W
      default: 1600
      selector:
        number:
          min: 0.0
          max: 5000.0
          unit_of_measurement: W
          mode: box
          step: 1.0
    MinInverterPower:
      name: Inverter lower limit
      description: Define the minimum power the inverter should deliver in W
      default: 600
      selector:
        number:
          min: 0.0
          max: 5000.0
          unit_of_measurement: W
          mode: box
          step: 1.0
    AllowedFeedIn:
      name: Number in W of grid feed that is accepted
      description: Limitation of PV Generation will only be active if Number in W
        of grid feed that is higher than this number
      default: 0
      selector:
        number:
          min: 0.0
          max: 5000.0
          unit_of_measurement: W
          mode: box
          step: 1.0
    ModeSelector:
      name: Select Controll ModeSelector
      description: 'Mode 1: smooth decrease of allowed generation. Mode 2: Hard Cut
        to zero feed in'
      default: 1
      selector:
        number:
          min: 1.0
          max: 2.0
          step: 1.0
          mode: slider
    GridPowerMeters:
      name: Sensors measuring Grid import or export e.g. all 3 phases in W
      description: All power meters will be summed up to define the total grid import
        or export. Choose e.g. all 3 sensors measuring L1, L2 & L3 in W
      selector:
        entity:
          device_class:
          - power
          multiple: true
    PVPowerMeters:
      name: Sensors measuring PV Generation in W
      description: Choose the sensor showing the current produced PV Power
      selector:
        entity:
          device_class:
          - power
          multiple: true
    NonPersistantLimit:
      name: Entity to set the non persistant absolut limit in W
      description: Choose the entity to define the limit of PV generation in W
      selector:
        entity: {}
    InverterOnlineStatus:
      name: Entity that shows if the inverter is online
      description: Choose the entity showing the inverters is reachable
      selector:
        entity: {}
    LimitHelper:
      name: Helper type input_boolean 
      description: This helper is required to ensure that the inverter is not flooded with commands.
      selector:
        entity:
          filter:
            domain: input_boolean
  source_url: https://github.com/o0shojo0o/hassio_blueprints/blob/main/tz.yaml
variables:
  lowerlimit: !input MinInverterPower
  upperlimit: !input MaxInverterPower
  currentlimit: !input NonPersistantLimit
  PVPowerMetersvar: !input PVPowerMeters
  GridPowerMetersvar: !input GridPowerMeters
  ctlr_mode: !input ModeSelector
  LimitHelper: !input LimitHelper
  pvgeneration: '{% set pvgeneration = expand(PVPowerMetersvar) | map(attribute=''state'') |map(''float'',default=0) | sum %} {{pvgeneration}}'
  gridsum: '{% set gridconsumption = expand(GridPowerMetersvar) | map(attribute=''state'') |map(''float'',default=0) | sum %} {{gridconsumption}}'
  modifier: !input AllowedFeedIn
  modifier_setpoint: '{% if gridsum < 0 -%}{{modifier}} {% else -%} {{0}} {%- endif %}'
  inverteronline: !input InverterOnlineStatus
  new_setpoint: '{% set setpoint = gridsum + modifier_setpoint|float(0) + states(currentlimit)|float(0) -5 %}{% if setpoint > upperlimit -%}{% set setpoint = upperlimit %}{% elif setpoint < lowerlimit %}{% set setpoint = lowerlimit %}{%- endif %}{{setpoint}}'
  new_setpoint_mode2: '{% set setpoint = gridsum + modifier_setpoint|float(0) + pvgeneration + 5 %}{% if setpoint > upperlimit -%}{% set setpoint = upperlimit %}{% elif setpoint < lowerlimit %}{% set setpoint = lowerlimit %}{%- endif %}{{setpoint}}'
trigger:
- platform: state
  entity_id: !input GridPowerMeters
  id: grid_event
- platform: state
  entity_id: !input PVPowerMeters
  id: pv_event
condition: []
action:
- choose:
  - conditions:
    - condition: template
      value_template: '{{ trigger.id == "grid_event" }}'
    - condition: template
      value_template: '{{ states(inverteronline) == "on"}}'
    - condition: template
      value_template: '{{ states(LimitHelper) == "off"}}'
    - condition: template
      value_template: '{{(new_setpoint - states(currentlimit)|float(0))|abs > 5}}'
    sequence:
    - service: input_boolean.turn_on
      target:
        entity_id: !input LimitHelper
      data: {}
    - service: logbook.log
      data_template:
        name: 'PVSetpoint:'
        message: 'Gridsum: {{gridsum}} W & PVGeneration: {{pvgeneration}} W -> new_setpoint: {{new_setpoint}} W'
    - service: number.set_value
      target:
        entity_id: !input NonPersistantLimit
      data:
        value: '{% if ctlr_mode == 1 -%}{{new_setpoint | round(0)}}{% elif ctlr_mode == 2 -%} {{new_setpoint_mode2 | round(0)}} {%- endif %}'
  - conditions:
    - condition: template
      value_template: '{{ trigger.id == "pv_event" }}'
    - condition: template
      value_template: '{{ states(LimitHelper) == "on"}}'
    sequence:   
    - service: input_boolean.turn_off
      target:
        entity_id: !input LimitHelper
      data: {}
mode: single
